#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Webdev_Assignment2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Webdev_Assignment2")]
	public partial class DataSourceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertDrug(Drug instance);
    partial void UpdateDrug(Drug instance);
    partial void DeleteDrug(Drug instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    partial void InsertDrugGroup(DrugGroup instance);
    partial void UpdateDrugGroup(DrugGroup instance);
    partial void DeleteDrugGroup(DrugGroup instance);
    partial void InsertHospital(Hospital instance);
    partial void UpdateHospital(Hospital instance);
    partial void DeleteHospital(Hospital instance);
    partial void InsertICD(ICD instance);
    partial void UpdateICD(ICD instance);
    partial void DeleteICD(ICD instance);
    partial void InsertLabOrder(LabOrder instance);
    partial void UpdateLabOrder(LabOrder instance);
    partial void DeleteLabOrder(LabOrder instance);
    partial void InsertLabOrderDetail(LabOrderDetail instance);
    partial void UpdateLabOrderDetail(LabOrderDetail instance);
    partial void DeleteLabOrderDetail(LabOrderDetail instance);
    partial void InsertMedicalServiceGroup(MedicalServiceGroup instance);
    partial void UpdateMedicalServiceGroup(MedicalServiceGroup instance);
    partial void DeleteMedicalServiceGroup(MedicalServiceGroup instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    partial void InsertPrescriptionDetail(PrescriptionDetail instance);
    partial void UpdatePrescriptionDetail(PrescriptionDetail instance);
    partial void DeletePrescriptionDetail(PrescriptionDetail instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataSourceDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Webdev_Assignment2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataSourceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataSourceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataSourceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataSourceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Drug> Drugs
		{
			get
			{
				return this.GetTable<Drug>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		public System.Data.Linq.Table<DrugGroup> DrugGroups
		{
			get
			{
				return this.GetTable<DrugGroup>();
			}
		}
		
		public System.Data.Linq.Table<Hospital> Hospitals
		{
			get
			{
				return this.GetTable<Hospital>();
			}
		}
		
		public System.Data.Linq.Table<ICD> ICDs
		{
			get
			{
				return this.GetTable<ICD>();
			}
		}
		
		public System.Data.Linq.Table<LabOrder> LabOrders
		{
			get
			{
				return this.GetTable<LabOrder>();
			}
		}
		
		public System.Data.Linq.Table<LabOrderDetail> LabOrderDetails
		{
			get
			{
				return this.GetTable<LabOrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<MedicalService> MedicalServices
		{
			get
			{
				return this.GetTable<MedicalService>();
			}
		}
		
		public System.Data.Linq.Table<MedicalServiceGroup> MedicalServiceGroups
		{
			get
			{
				return this.GetTable<MedicalServiceGroup>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
		
		public System.Data.Linq.Table<PrescriptionDetail> PrescriptionDetails
		{
			get
			{
				return this.GetTable<PrescriptionDetail>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Dob;
		
		private string _Licensenumber;
		
		private string _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDobChanging(string value);
    partial void OnDobChanged();
    partial void OnLicensenumberChanging(string value);
    partial void OnLicensenumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Doctor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dob", DbType="VarChar(50)")]
		public string Dob
		{
			get
			{
				return this._Dob;
			}
			set
			{
				if ((this._Dob != value))
				{
					this.OnDobChanging(value);
					this.SendPropertyChanging();
					this._Dob = value;
					this.SendPropertyChanged("Dob");
					this.OnDobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Licensenumber", DbType="VarChar(50)")]
		public string Licensenumber
		{
			get
			{
				return this._Licensenumber;
			}
			set
			{
				if ((this._Licensenumber != value))
				{
					this.OnLicensenumberChanging(value);
					this.SendPropertyChanging();
					this._Licensenumber = value;
					this.SendPropertyChanged("Licensenumber");
					this.OnLicensenumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drug")]
	public partial class Drug : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _GenericName;
		
		private System.Nullable<int> _Unit;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _DrugGroupId;
		
		private EntityRef<DrugGroup> _DrugGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenericNameChanging(string value);
    partial void OnGenericNameChanged();
    partial void OnUnitChanging(System.Nullable<int> value);
    partial void OnUnitChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnDrugGroupIdChanging(System.Nullable<int> value);
    partial void OnDrugGroupIdChanged();
    #endregion
		
		public Drug()
		{
			this._DrugGroup = default(EntityRef<DrugGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenericName", DbType="VarChar(50)")]
		public string GenericName
		{
			get
			{
				return this._GenericName;
			}
			set
			{
				if ((this._GenericName != value))
				{
					this.OnGenericNameChanging(value);
					this.SendPropertyChanging();
					this._GenericName = value;
					this.SendPropertyChanged("GenericName");
					this.OnGenericNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Int")]
		public System.Nullable<int> Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugGroupId", DbType="Int")]
		public System.Nullable<int> DrugGroupId
		{
			get
			{
				return this._DrugGroupId;
			}
			set
			{
				if ((this._DrugGroupId != value))
				{
					if (this._DrugGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugGroupIdChanging(value);
					this.SendPropertyChanging();
					this._DrugGroupId = value;
					this.SendPropertyChanged("DrugGroupId");
					this.OnDrugGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugGroup_Drug", Storage="_DrugGroup", ThisKey="DrugGroupId", OtherKey="Id", IsForeignKey=true)]
		public DrugGroup DrugGroup
		{
			get
			{
				return this._DrugGroup.Entity;
			}
			set
			{
				DrugGroup previousValue = this._DrugGroup.Entity;
				if (((previousValue != value) 
							|| (this._DrugGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrugGroup.Entity = null;
						previousValue.Drugs.Remove(this);
					}
					this._DrugGroup.Entity = value;
					if ((value != null))
					{
						value.Drugs.Add(this);
						this._DrugGroupId = value.Id;
					}
					else
					{
						this._DrugGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DrugGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _TreatedDate;
		
		private string _Place;
		
		private string _TreatedPatient;
		
		private string _TreatingDoctor;
		
		private string _Outcome;
		
		private System.Nullable<int> _PrescriptionId;
		
		private System.Nullable<int> _LabOrderId;
		
		private string _ICDcode;
		
		private EntityRef<ICD> _ICD;
		
		private EntityRef<LabOrder> _LabOrder;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTreatedDateChanging(string value);
    partial void OnTreatedDateChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    partial void OnTreatedPatientChanging(string value);
    partial void OnTreatedPatientChanged();
    partial void OnTreatingDoctorChanging(string value);
    partial void OnTreatingDoctorChanged();
    partial void OnOutcomeChanging(string value);
    partial void OnOutcomeChanged();
    partial void OnPrescriptionIdChanging(System.Nullable<int> value);
    partial void OnPrescriptionIdChanged();
    partial void OnLabOrderIdChanging(System.Nullable<int> value);
    partial void OnLabOrderIdChanged();
    partial void OnICDcodeChanging(string value);
    partial void OnICDcodeChanged();
    #endregion
		
		public Visit()
		{
			this._ICD = default(EntityRef<ICD>);
			this._LabOrder = default(EntityRef<LabOrder>);
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatedDate", DbType="VarChar(50)")]
		public string TreatedDate
		{
			get
			{
				return this._TreatedDate;
			}
			set
			{
				if ((this._TreatedDate != value))
				{
					this.OnTreatedDateChanging(value);
					this.SendPropertyChanging();
					this._TreatedDate = value;
					this.SendPropertyChanged("TreatedDate");
					this.OnTreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="VarChar(50)")]
		public string Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatedPatient", DbType="VarChar(50)")]
		public string TreatedPatient
		{
			get
			{
				return this._TreatedPatient;
			}
			set
			{
				if ((this._TreatedPatient != value))
				{
					this.OnTreatedPatientChanging(value);
					this.SendPropertyChanging();
					this._TreatedPatient = value;
					this.SendPropertyChanged("TreatedPatient");
					this.OnTreatedPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatingDoctor", DbType="VarChar(50)")]
		public string TreatingDoctor
		{
			get
			{
				return this._TreatingDoctor;
			}
			set
			{
				if ((this._TreatingDoctor != value))
				{
					this.OnTreatingDoctorChanging(value);
					this.SendPropertyChanging();
					this._TreatingDoctor = value;
					this.SendPropertyChanged("TreatingDoctor");
					this.OnTreatingDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Outcome", DbType="VarChar(50)")]
		public string Outcome
		{
			get
			{
				return this._Outcome;
			}
			set
			{
				if ((this._Outcome != value))
				{
					this.OnOutcomeChanging(value);
					this.SendPropertyChanging();
					this._Outcome = value;
					this.SendPropertyChanged("Outcome");
					this.OnOutcomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionId", DbType="Int")]
		public System.Nullable<int> PrescriptionId
		{
			get
			{
				return this._PrescriptionId;
			}
			set
			{
				if ((this._PrescriptionId != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionId = value;
					this.SendPropertyChanged("PrescriptionId");
					this.OnPrescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabOrderId", DbType="Int")]
		public System.Nullable<int> LabOrderId
		{
			get
			{
				return this._LabOrderId;
			}
			set
			{
				if ((this._LabOrderId != value))
				{
					if (this._LabOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabOrderIdChanging(value);
					this.SendPropertyChanging();
					this._LabOrderId = value;
					this.SendPropertyChanged("LabOrderId");
					this.OnLabOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDcode", DbType="VarChar(10)")]
		public string ICDcode
		{
			get
			{
				return this._ICDcode;
			}
			set
			{
				if ((this._ICDcode != value))
				{
					if (this._ICD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnICDcodeChanging(value);
					this.SendPropertyChanging();
					this._ICDcode = value;
					this.SendPropertyChanged("ICDcode");
					this.OnICDcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD_Visit", Storage="_ICD", ThisKey="ICDcode", OtherKey="Code", IsForeignKey=true)]
		public ICD ICD
		{
			get
			{
				return this._ICD.Entity;
			}
			set
			{
				ICD previousValue = this._ICD.Entity;
				if (((previousValue != value) 
							|| (this._ICD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ICD.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._ICD.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._ICDcode = value.Code;
					}
					else
					{
						this._ICDcode = default(string);
					}
					this.SendPropertyChanged("ICD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrder_Visit", Storage="_LabOrder", ThisKey="LabOrderId", OtherKey="Id", IsForeignKey=true)]
		public LabOrder LabOrder
		{
			get
			{
				return this._LabOrder.Entity;
			}
			set
			{
				LabOrder previousValue = this._LabOrder.Entity;
				if (((previousValue != value) 
							|| (this._LabOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabOrder.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._LabOrder.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._LabOrderId = value.Id;
					}
					else
					{
						this._LabOrderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LabOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Visit", Storage="_Prescription", ThisKey="PrescriptionId", OtherKey="id", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._PrescriptionId = value.id;
					}
					else
					{
						this._PrescriptionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugGroup")]
	public partial class DrugGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _GroupName;
		
		private EntitySet<Drug> _Drugs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public DrugGroup()
		{
			this._Drugs = new EntitySet<Drug>(new Action<Drug>(this.attach_Drugs), new Action<Drug>(this.detach_Drugs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(100)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugGroup_Drug", Storage="_Drugs", ThisKey="Id", OtherKey="DrugGroupId")]
		public EntitySet<Drug> Drugs
		{
			get
			{
				return this._Drugs;
			}
			set
			{
				this._Drugs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drugs(Drug entity)
		{
			this.SendPropertyChanging();
			entity.DrugGroup = this;
		}
		
		private void detach_Drugs(Drug entity)
		{
			this.SendPropertyChanging();
			entity.DrugGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospitals")]
	public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Licensenumber;
		
		private string _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLicensenumberChanging(string value);
    partial void OnLicensenumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Hospital()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Licensenumber", DbType="VarChar(50)")]
		public string Licensenumber
		{
			get
			{
				return this._Licensenumber;
			}
			set
			{
				if ((this._Licensenumber != value))
				{
					this.OnLicensenumberChanging(value);
					this.SendPropertyChanging();
					this._Licensenumber = value;
					this.SendPropertyChanged("Licensenumber");
					this.OnLicensenumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ICD")]
	public partial class ICD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Chapter;
		
		private string _Code;
		
		private EntitySet<Visit> _Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnChapterChanging(string value);
    partial void OnChapterChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public ICD()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chapter", DbType="VarChar(10)")]
		public string Chapter
		{
			get
			{
				return this._Chapter;
			}
			set
			{
				if ((this._Chapter != value))
				{
					this.OnChapterChanging(value);
					this.SendPropertyChanging();
					this._Chapter = value;
					this.SendPropertyChanged("Chapter");
					this.OnChapterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD_Visit", Storage="_Visits", ThisKey="Code", OtherKey="ICDcode")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.ICD = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.ICD = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabOrder")]
	public partial class LabOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Date;
		
		private string _OrderedDoctor;
		
		private System.Nullable<int> _LabOrderedDetailsId;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<LabOrderDetail> _LabOrderDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnOrderedDoctorChanging(string value);
    partial void OnOrderedDoctorChanged();
    partial void OnLabOrderedDetailsIdChanging(System.Nullable<int> value);
    partial void OnLabOrderedDetailsIdChanged();
    #endregion
		
		public LabOrder()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._LabOrderDetail = default(EntityRef<LabOrderDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="VarChar(50)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderedDoctor", DbType="VarChar(50)")]
		public string OrderedDoctor
		{
			get
			{
				return this._OrderedDoctor;
			}
			set
			{
				if ((this._OrderedDoctor != value))
				{
					this.OnOrderedDoctorChanging(value);
					this.SendPropertyChanging();
					this._OrderedDoctor = value;
					this.SendPropertyChanged("OrderedDoctor");
					this.OnOrderedDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabOrderedDetailsId", DbType="Int")]
		public System.Nullable<int> LabOrderedDetailsId
		{
			get
			{
				return this._LabOrderedDetailsId;
			}
			set
			{
				if ((this._LabOrderedDetailsId != value))
				{
					if (this._LabOrderDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabOrderedDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._LabOrderedDetailsId = value;
					this.SendPropertyChanged("LabOrderedDetailsId");
					this.OnLabOrderedDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrder_Visit", Storage="_Visits", ThisKey="Id", OtherKey="LabOrderId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrderDetail_LabOrder", Storage="_LabOrderDetail", ThisKey="LabOrderedDetailsId", OtherKey="Id", IsForeignKey=true)]
		public LabOrderDetail LabOrderDetail
		{
			get
			{
				return this._LabOrderDetail.Entity;
			}
			set
			{
				LabOrderDetail previousValue = this._LabOrderDetail.Entity;
				if (((previousValue != value) 
							|| (this._LabOrderDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabOrderDetail.Entity = null;
						previousValue.LabOrders.Remove(this);
					}
					this._LabOrderDetail.Entity = value;
					if ((value != null))
					{
						value.LabOrders.Add(this);
						this._LabOrderedDetailsId = value.Id;
					}
					else
					{
						this._LabOrderedDetailsId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LabOrderDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.LabOrder = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.LabOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabOrderDetails")]
	public partial class LabOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MedicalServer;
		
		private string _Result;
		
		private EntitySet<LabOrder> _LabOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMedicalServerChanging(string value);
    partial void OnMedicalServerChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public LabOrderDetail()
		{
			this._LabOrders = new EntitySet<LabOrder>(new Action<LabOrder>(this.attach_LabOrders), new Action<LabOrder>(this.detach_LabOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalServer", DbType="VarChar(100)")]
		public string MedicalServer
		{
			get
			{
				return this._MedicalServer;
			}
			set
			{
				if ((this._MedicalServer != value))
				{
					this.OnMedicalServerChanging(value);
					this.SendPropertyChanging();
					this._MedicalServer = value;
					this.SendPropertyChanged("MedicalServer");
					this.OnMedicalServerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(100)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrderDetail_LabOrder", Storage="_LabOrders", ThisKey="Id", OtherKey="LabOrderedDetailsId")]
		public EntitySet<LabOrder> LabOrders
		{
			get
			{
				return this._LabOrders;
			}
			set
			{
				this._LabOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabOrders(LabOrder entity)
		{
			this.SendPropertyChanging();
			entity.LabOrderDetail = this;
		}
		
		private void detach_LabOrders(LabOrder entity)
		{
			this.SendPropertyChanging();
			entity.LabOrderDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalService")]
	public partial class MedicalService
	{
		
		private System.Nullable<int> _Id;
		
		private string _ServiceName;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _ServiceGroupId;
		
		public MedicalService()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int")]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="VarChar(100)")]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this._ServiceName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceGroupId", DbType="Int")]
		public System.Nullable<int> ServiceGroupId
		{
			get
			{
				return this._ServiceGroupId;
			}
			set
			{
				if ((this._ServiceGroupId != value))
				{
					this._ServiceGroupId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalServiceGroup")]
	public partial class MedicalServiceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ServiceGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnServiceGroupChanging(string value);
    partial void OnServiceGroupChanged();
    #endregion
		
		public MedicalServiceGroup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceGroup", DbType="VarChar(100)")]
		public string ServiceGroup
		{
			get
			{
				return this._ServiceGroup;
			}
			set
			{
				if ((this._ServiceGroup != value))
				{
					this.OnServiceGroupChanging(value);
					this.SendPropertyChanging();
					this._ServiceGroup = value;
					this.SendPropertyChanged("ServiceGroup");
					this.OnServiceGroupChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Gender;
		
		private string _Dob;
		
		private string _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDobChanging(string value);
    partial void OnDobChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Patient()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dob", DbType="VarChar(50)")]
		public string Dob
		{
			get
			{
				return this._Dob;
			}
			set
			{
				if ((this._Dob != value))
				{
					this.OnDobChanging(value);
					this.SendPropertyChanging();
					this._Dob = value;
					this.SendPropertyChanged("Dob");
					this.OnDobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Date;
		
		private string _PrescribedDoctor;
		
		private System.Nullable<int> _PrescriptionDetailsId;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<PrescriptionDetail> _PrescriptionDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnPrescribedDoctorChanging(string value);
    partial void OnPrescribedDoctorChanged();
    partial void OnPrescriptionDetailsIdChanging(System.Nullable<int> value);
    partial void OnPrescriptionDetailsIdChanged();
    #endregion
		
		public Prescription()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._PrescriptionDetail = default(EntityRef<PrescriptionDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="VarChar(50)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescribedDoctor", DbType="VarChar(50)")]
		public string PrescribedDoctor
		{
			get
			{
				return this._PrescribedDoctor;
			}
			set
			{
				if ((this._PrescribedDoctor != value))
				{
					this.OnPrescribedDoctorChanging(value);
					this.SendPropertyChanging();
					this._PrescribedDoctor = value;
					this.SendPropertyChanged("PrescribedDoctor");
					this.OnPrescribedDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionDetailsId", DbType="Int")]
		public System.Nullable<int> PrescriptionDetailsId
		{
			get
			{
				return this._PrescriptionDetailsId;
			}
			set
			{
				if ((this._PrescriptionDetailsId != value))
				{
					if (this._PrescriptionDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionDetailsId = value;
					this.SendPropertyChanged("PrescriptionDetailsId");
					this.OnPrescriptionDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Visit", Storage="_Visits", ThisKey="id", OtherKey="PrescriptionId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrescriptionDetail_Prescription", Storage="_PrescriptionDetail", ThisKey="PrescriptionDetailsId", OtherKey="Id", IsForeignKey=true)]
		public PrescriptionDetail PrescriptionDetail
		{
			get
			{
				return this._PrescriptionDetail.Entity;
			}
			set
			{
				PrescriptionDetail previousValue = this._PrescriptionDetail.Entity;
				if (((previousValue != value) 
							|| (this._PrescriptionDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrescriptionDetail.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._PrescriptionDetail.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._PrescriptionDetailsId = value.Id;
					}
					else
					{
						this._PrescriptionDetailsId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PrescriptionDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrescriptionDetails")]
	public partial class PrescriptionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DrugId;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _DosePerDay;
		
		private string _SpecialInstruction;
		
		private EntitySet<Prescription> _Prescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrugIdChanging(System.Nullable<int> value);
    partial void OnDrugIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnDosePerDayChanging(System.Nullable<int> value);
    partial void OnDosePerDayChanged();
    partial void OnSpecialInstructionChanging(string value);
    partial void OnSpecialInstructionChanged();
    #endregion
		
		public PrescriptionDetail()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugId", DbType="Int")]
		public System.Nullable<int> DrugId
		{
			get
			{
				return this._DrugId;
			}
			set
			{
				if ((this._DrugId != value))
				{
					this.OnDrugIdChanging(value);
					this.SendPropertyChanging();
					this._DrugId = value;
					this.SendPropertyChanged("DrugId");
					this.OnDrugIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DosePerDay", DbType="Int")]
		public System.Nullable<int> DosePerDay
		{
			get
			{
				return this._DosePerDay;
			}
			set
			{
				if ((this._DosePerDay != value))
				{
					this.OnDosePerDayChanging(value);
					this.SendPropertyChanging();
					this._DosePerDay = value;
					this.SendPropertyChanged("DosePerDay");
					this.OnDosePerDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialInstruction", DbType="VarChar(100)")]
		public string SpecialInstruction
		{
			get
			{
				return this._SpecialInstruction;
			}
			set
			{
				if ((this._SpecialInstruction != value))
				{
					this.OnSpecialInstructionChanging(value);
					this.SendPropertyChanging();
					this._SpecialInstruction = value;
					this.SendPropertyChanged("SpecialInstruction");
					this.OnSpecialInstructionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrescriptionDetail_Prescription", Storage="_Prescriptions", ThisKey="Id", OtherKey="PrescriptionDetailsId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.PrescriptionDetail = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.PrescriptionDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(100)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(50)")]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
